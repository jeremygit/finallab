/*!
 *  @file UART.c
 *
 *  @brief Definitions of the private UART functions
 *
 *  @author Author: Jeremy Heritage 12033445 , Victor WU (12009155)
 *
 *  @date Created on: 29 Mar 2017, Last updated 01 April 2017
 *
 *  Hardware/Software configuration required to use the module : NA
 */
/*!
**  @addtogroup UART_module UART module documentation
**  @{
*/
/* MODULE UART */

// Information regarding the memory map for MK70F12 processor.
#include "MK70F12.h"
// New non-standard types
#include "types.h"
// Import the FIFO module.
#include "FIFO.h"

#include "Cpu.h"

#include "OS.h"

// Transfer FIFO Buffer
static TFIFO TxFIFO;
// Receive FIFO Buffer
static TFIFO RxFIFO;

static OS_ECB *UARTRXSemaphore;
static OS_ECB *UARTTXSemaphore;

// Interrupt for UART2
// IRQ 49 : 49 mod 32 = 17
// Non-IPR 1
// IPR 12

bool UART_Init(const uint32_t baudRate, const uint32_t moduleClk)
{

  UARTRXSemaphore = OS_SemaphoreCreate(0);
  UARTTXSemaphore = OS_SemaphoreCreate(0);

  // Register keyword for sbr, brfa
  uint16_t sbr;
  uint16_t brfa;

  /* register setup to enable UART*/

  // Gate Control Register for UART2 and PORTE to enable pin routing
  SIM_SCGC4 |= SIM_SCGC4_UART2_MASK;
  SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK;

  /*! Pin Gate Control to enable multiplexing of pins of PORTE bit 16 and 17 to UART2_TX and UART_RX
   *  Search for PORT_PCR_MUX(x) in MK70F12.h for more explicit process
   *  In this case, the Alternate 3 is chosen in the Pin MUX control
   */
  PORTE_PCR16 = PORT_PCR_MUX(3);
  PORTE_PCR17 = PORT_PCR_MUX(3);

  // Disable the Rx and Tx of the UART
  UART2_C2 &= ~UART_C2_TE_MASK;
  UART2_C2 &= ~UART_C2_RE_MASK;
  UART2_C1 = 0x00;

  /*! Calculation of the System Baud Rate(SBR) and Baud Rate Fine Adjust(BRFA) - dependent upon input baud rate
   * These code are based on the formula provided in the K70 manual : UART Baud Rate = UART moduleclk / (16 * (sbr + brd [or aka BRFA/4])
   */
  brfa = ((moduleClk * 2) / baudRate) % 32;
  sbr = moduleClk / (16 * baudRate);
  //Set the respective values to their corresponding registers to generate a synchronized baud rate
  //UART_C4_BRFA(brfa);
  UART2_C4 |= (brfa & UART_C4_BRFA_MASK);
  UART2_BDH |= 0x1F & (sbr >> 8);
  UART2_BDL = sbr;

  // Enable the Rx and Tx of the UART
  UART2_C2 |= UART_C2_TE_MASK;
  UART2_C2 |= UART_C2_RE_MASK;

  FIFO_Init(&TxFIFO);
  FIFO_Init(&RxFIFO);

  // Clear pending interrupts
  NVICICPR1 = (1 << 17);
  // Enable Interrupts
  NVICISER1 = (1 << 17);

  // Enable Receive interrupts...
  UART2_C2 |= UART_C2_RIE_MASK;

  //Initialization is successful
  return true;

}

bool UART_InChar(uint8_t * const dataPtr)
{
  return FIFO_Get(&RxFIFO, dataPtr);
}

bool UART_OutChar(const uint8_t data)
{
  EnterCritical();
  // Attempt to put a transfer-byte
  if (FIFO_Put(&TxFIFO, data) == 0)
  {
    // Exit early if we weren't able to put a byte
    // because transfer FIFO is full...
    ExitCritical();
    return false;
  }

  // If we could put a transfer-byte, enable interrupts to send it!
  // ExitCritical();
  UART2_C2 |= UART_C2_TIE_MASK;
  ExitCritical();
  return true;
}

void UART_Poll(void)
{
  // Depending on whether the Receive Data Register Full or Transmitted Data Register Empty (RDRF/TDRE)is set,
  // the data is either stored or retrieved.
  if (UART2_S1 & UART_S1_RDRF_MASK)
  {
    FIFO_Put(&RxFIFO, UART2_D);
  }
  if (UART2_S1 & UART_S1_TDRE_MASK)
  {
    FIFO_Get(&TxFIFO, (uint8_t *)&UART2_D);
  }
}

// TODO, potentially make one thread with arg specifying its function of Rx or Tx
void UART_RxThread(void *arg)
{
  OS_ERROR error;
  for (;;)
  {
    error = OS_SemaphoreWait(UARTRXSemaphore, 0);

    // Receive register was not full, so put the byte in the receive fifo
    FIFO_Put(&RxFIFO, UART2_D);

    UART2_C2 |= UART_C2_RIE_MASK;
  }
}

void UART_TxThread(void *arg)
{
  OS_ERROR error;
  for (;;)
  {

    error = OS_SemaphoreWait(UARTTXSemaphore, 0);




    // Attempt to get the transfer-byte from the fifo...

    // Write to UART2_D

    if (FIFO_Get(&TxFIFO, (uint8_t *)&UART2_D) == 0)
    {
      // Nothing to put (fifo empty)? disable transfer-ready interrupts
      UART2_C2 &= ~UART_C2_TIE_MASK;
    }
  }
}

void __attribute__((interrupt)) UART2_ISR(void)
{
  OS_ISREnter();

  // Transmit
  // Transmit interrupts are enabled
  if (UART2_C2 & UART_C2_TIE_MASK)
  {
    // And the transmit register is ready for something to put in it...
    if (UART2_S1 & UART_S1_TDRE_MASK)
    {
      if (FIFO_Get(&TxFIFO, (uint8_t *)&UART2_D) == 0)
      {
	// Nothing to put (fifo empty)? disable transfer-ready interrupts
	UART2_C2 &= ~UART_C2_TIE_MASK;
      }
    }
  }

  // Receive
  if (UART2_C2 & UART_C2_RIE_MASK)
  {
    if (UART2_S1 & UART_S1_RDRF_MASK)
    {
	// TODO ...
      UART2_C2 &= ~UART_C2_RIE_MASK;
      (void)OS_SemaphoreSignal(UARTRXSemaphore);
    }
  }


  OS_ISRExit();
}

/*
// ISR up to Lab4
void __attribute__((interrupt)) UART2_ISR(void)
{
  // Recieve
  if (UART2_C2 & UART_C2_RIE_MASK)
  {
    if (UART2_S1 & UART_S1_RDRF_MASK)
    {
      // Receive register was full, so put the byte in the recieve fifo
      FIFO_Put(&RxFIFO, UART2_D);
    }
  }

  // Transmit
  // Transmit interrupts are enabled
  if (UART2_C2 & UART_C2_TIE_MASK)
  {
    // And the transmit register is ready for something to put in it...
    if (UART2_S1 & UART_S1_TDRE_MASK)
    {
      // Attempt to get the transfer-byte from the fifo...
      if (FIFO_Get(&TxFIFO, (uint8_t *)&UART2_D) == 0)
      {
	// Nothing to put (fifo empty)? disable transfer-ready interrupts
	UART2_C2 &= ~UART_C2_TIE_MASK;
      }
    }
  }

}
*/

/*!
** @}
*/
